(ns advent-of-code-2022.day2
  (:require [clojure.string :as str]))

(def rps-score {"X" 1, "Y" 2, "Z" 3})

(defn read-input-day2 []
  (->> (slurp "data/day2_input.txt")
       (str/split-lines)
       (map #(str/split % #"\s"))))

(defn calculate-total-score-of-shapes []
  (let [choices (read-input-day2)
        my-choices (map last choices)]
    (->> (map #(get rps-score %) my-choices)
         (reduce +))))

(defn- calculate-score-of-outcome [their-choice your-choice]
  (if (= their-choice your-choice)
    3
    (if (or (and (= their-choice "A") (= your-choice "Y"))
            (and (= their-choice "B") (= your-choice "Z"))
            (and (= their-choice "C") (= your-choice "X")))
      6
      0)))

(defn calculate-total-score-of-outcome []
  (let [choices (read-input-day2)]))

(get rps-score "X")

(map #(get rps-score %) ["X" "Y" "X"])

(calculate-score-of-outcome "A" "X")

